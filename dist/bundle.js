(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// /* MAPBOX CODE */

loc = "oakland";
placeholder = "Enter Location";

newLoc = function (e) {
    console.log('debugging');
    console.log(e);
    debugger;
    e.preventDefault();
    loc = document.locform.locinput.value;
};

mapboxKey = "pk.eyJ1IjoibWNlb2luIiwiYSI6ImNpZ2p0d29vcTAwODV1MWtyMjEyZGx1ejYifQ.e5vXnx4Hm0f0hbgUGFx78A";

mapboxRequest = "https://api.mapbox.com/geocoding/v5/mapbox.places/" + loc + ".json?access_token=" + mapboxKey;

console.log("mapboxRequest: " + mapboxRequest);

var response = null;
var responseObject = null;
var responseBox = null;
var responseName = null;

$.ajax({
    url: mapboxRequest,
    // data: params,
    // headers: {
    //     "Authorization": auth
    // },
    success: function (data) {
        // do something with data.features here
        console.log("mapbox success");
        console.log(data);
        responseObject = data.features[0];
        responseBox = responseObject.bbox; // [-122.63405300977094, 37.81494699161172, -122.45728299009144, 37.88677500999976]
        responseName = responseObject.place_name; // "Sausalito, California, United States"
        planetLabs();
    }
});

/* PLANET LABS CODE */
planetLabs = function () {
    var url = "https://api.planet.com/v0/scenes/ortho/";
    var key = 'd68202514a1c4a28adb429370e2017e6';

    // [longitude, latitude]
    // var sf_nw = [-122.545373, 37.815798];
    var sf_nw = Array(responseBox[0], responseBox[1]);
    // var sf_se = [-122.340066, 37.709403];
    var sf_se = Array(responseBox[2], responseBox[3]);
    var sf_ne = [sf_se[0], sf_nw[1]];
    var sf_sw = [sf_nw[0], sf_se[1]];
    var bounds = [sf_nw, sf_ne, sf_se, sf_sw, sf_nw];

    // // Using WKT

    var bounds_joined = [];

    for (var i = 0; i < bounds.length; i++) {
        bounds_joined.push(bounds[i].join(' '));
    }

    var intersects = "POLYGON((" + bounds_joined.join(', ') + "))";

    var params = {
        intersects: intersects
    };

    var auth = "Basic " + btoa(key + ":");

    $.ajax({
        url: url,
        data: params,
        headers: {
            "Authorization": auth
        },
        success: function (data) {
            // do something with data.features here
            console.log(data.features);
            ortho_id = data.features[0].id;
            console.log("ortho_id: " + ortho_id);
        }
    });
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy93YXRjaGlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIiwiaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0VBLEdBQUcsR0FBRyxTQUFTLENBQUE7QUFDZixXQUFXLEdBQUcsZ0JBQWdCLENBQUE7O0FBRTlCLE1BQU0sR0FBRyxVQUFTLENBQUMsRUFBQyxBQUNsQjtXQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFBLEFBQ3hCO1dBQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFDZDthQUFRLEFBQ1I7S0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDLEFBQ25CO09BQUcsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUE7Q0FDdEMsQ0FBQTs7QUFFRCxTQUFTLEdBQUcsMEZBQTBGLENBQUE7O0FBRXRHLGFBQWEsR0FBRyxvREFBb0QsR0FBQyxHQUFHLEdBQUMscUJBQXFCLEdBQUMsU0FBUyxDQUFBOztBQUV4RyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixHQUFHLGFBQWEsQ0FBQyxDQUFBOztBQUU5QyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUM7QUFDcEIsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDO0FBQzFCLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQztBQUN2QixJQUFJLFlBQVksR0FBRyxJQUFJLENBQUM7O0FBRXhCLENBQUMsQ0FBQyxJQUFJLENBQUMsQUFDTDtPQUFHLEVBQUUsYUFBYSxBQUtsQjs7Ozs7V0FBTyxFQUFFLFVBQVMsSUFBSSxFQUFFLEFBRXBCOztlQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUEsQUFDN0I7ZUFBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQSxBQUNqQjtzQkFBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFDakM7bUJBQVcsR0FBRyxjQUFjLENBQUMsSUFBSTtBQUFBLEFBQ2pDLG9CQUFZLEdBQUcsY0FBYyxDQUFDLFVBQVU7QUFBQSxBQUN4QyxrQkFBVSxFQUFFLENBQUM7S0FDaEI7Q0FDQSxDQUFDOzs7QUFBQyxBQUdMLFVBQVUsR0FBRyxZQUFVLEFBQ3JCO1FBQUksR0FBRyxHQUFHLHlDQUF5QyxDQUFDLEFBQ3BEO1FBQUksR0FBRyxHQUFHLGtDQUFrQzs7OztBQUFDLEFBSTdDLFFBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDOztBQUFBLEFBRWpELFFBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFDakQ7UUFBSSxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDakM7UUFBSSxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDakM7UUFBSSxNQUFNLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDOzs7O0FBQUMsQUFJakQsUUFBSSxhQUFhLEdBQUcsRUFBRSxDQUFDLEFBRXZCOztTQUFLLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxBQUNoQztxQkFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDM0MsQUFFRDs7UUFBSSxVQUFVLEdBQUcsV0FBVyxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEFBRS9EOztRQUFJLE1BQU0sR0FBRyxBQUNUO2tCQUFVLEVBQUUsVUFBVTtLQUN6QixDQUFDLEFBRUY7O1FBQUksSUFBSSxHQUFHLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEFBRXRDOztLQUFDLENBQUMsSUFBSSxDQUFDLEFBQ0g7V0FBRyxFQUFFLEdBQUcsQUFDUjtZQUFJLEVBQUUsTUFBTSxBQUNaO2VBQU8sRUFBRSxBQUNMOzJCQUFlLEVBQUUsSUFBSTtTQUN4QixBQUNEO2VBQU8sRUFBRSxVQUFTLElBQUksRUFBRSxBQUVwQjs7bUJBQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBLEFBQzFCO29CQUFRLEdBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEFBQUMsQ0FBQSxBQUNoQzttQkFBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLENBQUE7U0FDdkM7S0FDSixDQUFDLENBQUM7Q0FDSixDQUFBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8vIC8qIE1BUEJPWCBDT0RFICovXG5cbmxvYyA9IFwib2FrbGFuZFwiXG5wbGFjZWhvbGRlciA9IFwiRW50ZXIgTG9jYXRpb25cIlxuXG5uZXdMb2MgPSBmdW5jdGlvbihlKXtcbiAgY29uc29sZS5sb2coJ2RlYnVnZ2luZycpXG4gIGNvbnNvbGUubG9nKGUpXG4gIGRlYnVnZ2VyXG4gIGUucHJldmVudERlZmF1bHQoKTtcbiAgbG9jID0gZG9jdW1lbnQubG9jZm9ybS5sb2NpbnB1dC52YWx1ZVxufVxuXG5tYXBib3hLZXkgPSBcInBrLmV5SjFJam9pYldObGIybHVJaXdpWVNJNkltTnBaMnAwZDI5dmNUQXdPRFYxTVd0eU1qRXlaR3gxZWpZaWZRLmU1dlhueDRIbTBmMGhiZ1VHRng3OEFcIlxuXG5tYXBib3hSZXF1ZXN0ID0gXCJodHRwczovL2FwaS5tYXBib3guY29tL2dlb2NvZGluZy92NS9tYXBib3gucGxhY2VzL1wiK2xvYytcIi5qc29uP2FjY2Vzc190b2tlbj1cIittYXBib3hLZXlcblxuY29uc29sZS5sb2coXCJtYXBib3hSZXF1ZXN0OiBcIiArIG1hcGJveFJlcXVlc3QpXG5cbnZhciByZXNwb25zZSA9IG51bGw7XG52YXIgcmVzcG9uc2VPYmplY3QgPSBudWxsO1xudmFyIHJlc3BvbnNlQm94ID0gbnVsbDtcbnZhciByZXNwb25zZU5hbWUgPSBudWxsO1xuXG4kLmFqYXgoe1xuICB1cmw6IG1hcGJveFJlcXVlc3QsXG4gIC8vIGRhdGE6IHBhcmFtcyxcbiAgLy8gaGVhZGVyczoge1xuICAvLyAgICAgXCJBdXRob3JpemF0aW9uXCI6IGF1dGhcbiAgLy8gfSxcbiAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgLy8gZG8gc29tZXRoaW5nIHdpdGggZGF0YS5mZWF0dXJlcyBoZXJlXG4gICAgICBjb25zb2xlLmxvZyhcIm1hcGJveCBzdWNjZXNzXCIpXG4gICAgICBjb25zb2xlLmxvZyhkYXRhKVxuICAgICAgcmVzcG9uc2VPYmplY3QgPSBkYXRhLmZlYXR1cmVzWzBdXG4gICAgICByZXNwb25zZUJveCA9IHJlc3BvbnNlT2JqZWN0LmJib3ggLy8gWy0xMjIuNjM0MDUzMDA5NzcwOTQsIDM3LjgxNDk0Njk5MTYxMTcyLCAtMTIyLjQ1NzI4Mjk5MDA5MTQ0LCAzNy44ODY3NzUwMDk5OTk3Nl1cbiAgICAgIHJlc3BvbnNlTmFtZSA9IHJlc3BvbnNlT2JqZWN0LnBsYWNlX25hbWUgLy8gXCJTYXVzYWxpdG8sIENhbGlmb3JuaWEsIFVuaXRlZCBTdGF0ZXNcIlxuICAgICAgcGxhbmV0TGFicygpO1xuICB9LFxuICB9KTtcblxuLyogUExBTkVUIExBQlMgQ09ERSAqL1xucGxhbmV0TGFicyA9IGZ1bmN0aW9uKCl7XG4gIHZhciB1cmwgPSBcImh0dHBzOi8vYXBpLnBsYW5ldC5jb20vdjAvc2NlbmVzL29ydGhvL1wiO1xuICB2YXIga2V5ID0gJ2Q2ODIwMjUxNGExYzRhMjhhZGI0MjkzNzBlMjAxN2U2JztcblxuICAvLyBbbG9uZ2l0dWRlLCBsYXRpdHVkZV1cbiAgLy8gdmFyIHNmX253ID0gWy0xMjIuNTQ1MzczLCAzNy44MTU3OThdO1xuICB2YXIgc2ZfbncgPSBBcnJheShyZXNwb25zZUJveFswXSwgcmVzcG9uc2VCb3hbMV0pXG4gIC8vIHZhciBzZl9zZSA9IFstMTIyLjM0MDA2NiwgMzcuNzA5NDAzXTtcbiAgdmFyIHNmX3NlID0gQXJyYXkocmVzcG9uc2VCb3hbMl0sIHJlc3BvbnNlQm94WzNdKVxuICB2YXIgc2ZfbmUgPSBbc2Zfc2VbMF0sIHNmX253WzFdXTtcbiAgdmFyIHNmX3N3ID0gW3NmX253WzBdLCBzZl9zZVsxXV07XG4gIHZhciBib3VuZHMgPSBbc2ZfbncsIHNmX25lLCBzZl9zZSwgc2Zfc3csIHNmX253XTtcblxuICAvLyAvLyBVc2luZyBXS1RcblxuICB2YXIgYm91bmRzX2pvaW5lZCA9IFtdO1xuXG4gIGZvciAodmFyIGk9MDsgaTxib3VuZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGJvdW5kc19qb2luZWQucHVzaChib3VuZHNbaV0uam9pbignICcpKTtcbiAgfVxuXG4gIHZhciBpbnRlcnNlY3RzID0gXCJQT0xZR09OKChcIiArIGJvdW5kc19qb2luZWQuam9pbignLCAnKSArIFwiKSlcIjtcblxuICB2YXIgcGFyYW1zID0ge1xuICAgICAgaW50ZXJzZWN0czogaW50ZXJzZWN0c1xuICB9O1xuXG4gIHZhciBhdXRoID0gXCJCYXNpYyBcIiArIGJ0b2Eoa2V5ICsgXCI6XCIpO1xuXG4gICQuYWpheCh7XG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IHBhcmFtcyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBcIkF1dGhvcml6YXRpb25cIjogYXV0aFxuICAgICAgfSxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAvLyBkbyBzb21ldGhpbmcgd2l0aCBkYXRhLmZlYXR1cmVzIGhlcmVcbiAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhLmZlYXR1cmVzKVxuICAgICAgICAgIG9ydGhvX2lkID0gKGRhdGEuZmVhdHVyZXNbMF0uaWQpXG4gICAgICAgICAgY29uc29sZS5sb2coXCJvcnRob19pZDogXCIgKyBvcnRob19pZClcbiAgICAgIH0sXG4gIH0pO1xufVxuIl19
